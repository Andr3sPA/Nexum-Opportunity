plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id "org.springdoc.openapi-gradle-plugin" version "1.9.0"
}

group = 'co.ude.udea.nexum'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "2024.0.1")
}


dependencies {
    // Annotations
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.6.3'

    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.6.3'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.5'

    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.4.3'
    implementation 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Feign
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.2.0'
    implementation group: 'io.github.openfeign', name: 'feign-hc5', version: '13.5'

    // Developer
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Database
    runtimeOnly 'org.postgresql:postgresql'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

def jacocoExclude = [
        '**/dto/.*',
        '**/spi/.*',
        '**/api/.*',
        '**/mappers/.*',
        '**/repository/.*',
        '**/*.test',
        '**/generated/.*',
        "**/model/**/.*",
        "**/application/**/.*",
        "**/infrastructure/**/.*",
]

test {
    useJUnitPlatform()
    // Use H2 in-memory database for tests via application-test.yml
    // This avoids needing to connect to PostgreSQL during testing
    systemProperty 'spring.profiles.active', 'test'
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.12"
}


jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
}

def loadEnvFile() {
    def envFile = file('.env')
    def envVars = [:]
    
    if (envFile.exists()) {
        envFile.readLines().each { line ->
            if (line && !line.startsWith('#') && line.contains('=')) {
                def (key, value) = line.split('=', 2)
                if (key && value) {
                    def cleanKey = key.trim()
                    def cleanValue = value.trim()
                    // Remove quotes if present
                    if (cleanValue.startsWith('"') && cleanValue.endsWith('"')) {
                        cleanValue = cleanValue.substring(1, cleanValue.length() - 1)
                    }
                    envVars[cleanKey] = cleanValue
                    System.setProperty(cleanKey, cleanValue)
                }
            }
        }
    }
    return envVars
}

tasks.named('bootRun') {
    doFirst {
        def envVars = loadEnvFile()
        environment(envVars)
        println "Loaded environment variables for bootRun:"
        envVars.each { key, value -> 
            println "  ${key}: ${value}"
        }
    }
}